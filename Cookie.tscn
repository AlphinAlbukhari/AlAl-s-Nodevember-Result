[gd_scene load_steps=90 format=2]

[ext_resource path="res://addons/shaderV/rgba/noise/worley2d.gd" type="Script" id=1]
[ext_resource path="res://60fps image sequence export.gd" type="Script" id=2]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 128
subdivide_depth = 128

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0.050505, 0.292929, 0.489899 )
colors = PoolColorArray( 0.445313, 0.445313, 0.445313, 1, 0.792969, 0.792969, 0.792969, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = SubResource( 3 )

[sub_resource type="VisualShaderNodeVectorOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.4, 0.2, 0.03 ) ]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id=6]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1 ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="Gradient" id=8]
offsets = PoolRealArray( 0, 0.251572, 0.373737 )
colors = PoolColorArray( 1, 1, 1, 1, 0.675781, 0.675781, 0.675781, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=9]
gradient = SubResource( 8 )

[sub_resource type="VisualShaderNodeTexture" id=10]
output_port_for_preview = 0
texture = SubResource( 9 )

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 0.07 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=13]
lacunarity = 3.03

[sub_resource type="NoiseTexture" id=14]
noise = SubResource( 13 )

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = SubResource( 14 )

[sub_resource type="VisualShaderNodeScalarOp" id=16]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="Gradient" id=17]
offsets = PoolRealArray( 0, 0.79798 )
colors = PoolColorArray( 0, 0, 0, 1, 0.0859375, 0.0325623, 0.0325623, 1 )

[sub_resource type="GradientTexture" id=18]
gradient = SubResource( 17 )

[sub_resource type="VisualShaderNodeTexture" id=19]
texture = SubResource( 18 )

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorInterp" id=21]
output_port_for_preview = 0

[sub_resource type="OpenSimplexNoise" id=22]
period = 27.5
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=23]
as_normalmap = true
bump_strength = 32.0
noise = SubResource( 22 )

[sub_resource type="VisualShaderNodeTexture" id=24]
texture = SubResource( 23 )

[sub_resource type="Gradient" id=25]
offsets = PoolRealArray( 0, 0.671717 )
colors = PoolColorArray( 0.320313, 0.320313, 0.320313, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=26]
gradient = SubResource( 25 )

[sub_resource type="VisualShaderNodeTexture" id=27]
texture = SubResource( 26 )

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=29]
constant = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id=30]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.5, 1.5, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=31]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=32]

[sub_resource type="Gradient" id=33]
offsets = PoolRealArray( 0, 0.154321, 0.351852, 0.401235, 0.420495, 0.432927 )
colors = PoolColorArray( 0.777344, 0.777344, 0.777344, 1, 0.757813, 0.757813, 0.757813, 1, 0.527344, 0.527344, 0.527344, 1, 0.352941, 0.352941, 0.352941, 1, 0.179688, 0.179688, 0.179688, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=34]
gradient = SubResource( 33 )

[sub_resource type="VisualShaderNodeTexture" id=35]
texture = SubResource( 34 )

[sub_resource type="OpenSimplexNoise" id=36]
period = 27.5
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=37]
noise = SubResource( 36 )

[sub_resource type="VisualShaderNodeTexture" id=38]
texture = SubResource( 37 )

[sub_resource type="VisualShaderNodeVectorOp" id=39]
output_port_for_preview = 0
operator = 2

[sub_resource type="Gradient" id=40]
offsets = PoolRealArray( 0, 0.00505051 )

[sub_resource type="GradientTexture" id=41]
gradient = SubResource( 40 )

[sub_resource type="VisualShaderNodeTexture" id=42]
output_port_for_preview = 0
texture = SubResource( 41 )

[sub_resource type="VisualShaderNodeScalarOp" id=43]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="Curve" id=44]
min_value = -1.0
_data = [ Vector2( 0, -1 ), 0.0, 2.0, 0, 1, Vector2( 1, 1 ), 2.0, 0.0, 1, 0 ]

[sub_resource type="CurveTexture" id=45]
curve = SubResource( 44 )

[sub_resource type="VisualShaderNodeTexture" id=46]
texture = SubResource( 45 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=47]

[sub_resource type="VisualShaderNodeVectorCompose" id=48]
output_port_for_preview = 0

[sub_resource type="Gradient" id=49]
offsets = PoolRealArray( 0.0243902, 0.383298, 0.408537, 0.423983, 0.439024 )
colors = PoolColorArray( 0, 0, 0, 1, 0.730469, 0.730469, 0.730469, 1, 0.65625, 0.65625, 0.65625, 1, 0.484375, 0.484375, 0.484375, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=50]
gradient = SubResource( 49 )

[sub_resource type="VisualShaderNodeTexture" id=51]
output_port_for_preview = 0
texture = SubResource( 50 )

[sub_resource type="VisualShaderNodeVectorOp" id=52]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=53]

[sub_resource type="VisualShaderNodeCustom" id=54]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1 ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=55]
input_name = "uv"

[sub_resource type="Gradient" id=56]
offsets = PoolRealArray( 0.188679, 0.373737 )
colors = PoolColorArray( 0.820313, 0.820313, 0.820313, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=57]
gradient = SubResource( 56 )

[sub_resource type="VisualShaderNodeTexture" id=58]
output_port_for_preview = 0
texture = SubResource( 57 )

[sub_resource type="VisualShaderNodeInput" id=59]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=60]

[sub_resource type="VisualShaderNodeTexture" id=61]
texture = SubResource( 14 )

[sub_resource type="VisualShaderNodeScalarOp" id=62]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=63]
default_input_values = [ 0, 0.0, 1, 0.07 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=64]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.3, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=65]

[sub_resource type="VisualShaderNodeVectorOp" id=66]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=67]

[sub_resource type="Gradient" id=68]
offsets = PoolRealArray( 0.328283, 0.378788 )
colors = PoolColorArray( 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=69]
gradient = SubResource( 68 )

[sub_resource type="VisualShaderNodeTexture" id=70]
texture = SubResource( 69 )

[sub_resource type="VisualShaderNodeScalarOp" id=71]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=72]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=73]
operator = 2

[sub_resource type="OpenSimplexNoise" id=74]
period = 107.8

[sub_resource type="NoiseTexture" id=75]
noise = SubResource( 74 )

[sub_resource type="VisualShaderNodeTexture" id=76]
texture = SubResource( 75 )

[sub_resource type="VisualShaderNodeVectorOp" id=77]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=78]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.5, 1.5, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorLen" id=79]

[sub_resource type="VisualShaderNodeTexture" id=80]
texture = SubResource( 34 )

[sub_resource type="VisualShaderNodeVectorOp" id=81]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.07, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=82]

[sub_resource type="VisualShaderNodeInput" id=83]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTexture" id=84]
texture = SubResource( 45 )

[sub_resource type="VisualShader" id=85]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, specular_schlick_ggx, unshaded;

uniform sampler2D tex_vtx_28;
uniform sampler2D tex_vtx_21;
uniform sampler2D tex_vtx_19;
uniform sampler2D tex_vtx_5;
uniform sampler2D tex_vtx_14;
uniform sampler2D tex_vtx_9;
uniform sampler2D tex_vtx_10;
uniform sampler2D tex_vtx_31;
uniform sampler2D tex_frg_6;
uniform sampler2D tex_frg_10;
uniform sampler2D tex_frg_5;
uniform sampler2D tex_frg_21;
uniform sampler2D tex_frg_22;
uniform sampler2D tex_frg_17;
uniform sampler2D tex_frg_14;
uniform sampler2D tex_frg_19;
uniform sampler2D tex_frg_8;


// Worley2D

vec2 cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}


void vertex() {
// Input:18
	vec3 n_out18p0 = vec3(UV, 0.0);

// VectorOp:26
	vec3 n_in26p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out26p0 = n_out18p0 - n_in26p1;

// VectorLen:27
	float n_out27p0 = length(n_out26p0);

// Texture:28
	vec4 tex_vtx_28_read = texture(tex_vtx_28, vec3(n_out27p0).xy);
	vec3 n_out28p0 = tex_vtx_28_read.rgb;
	float n_out28p1 = tex_vtx_28_read.a;

// VectorOp:33
	vec3 n_in33p1 = vec3(1.50000, 1.50000, 0.00000);
	vec3 n_out33p0 = n_out18p0 * n_in33p1;

// Texture:21
	vec4 tex_vtx_21_read = texture(tex_vtx_21, UV.xy);
	vec3 n_out21p0 = tex_vtx_21_read.rgb;
	float n_out21p1 = tex_vtx_21_read.a;

// ScalarOp:23
	float n_in23p1 = 0.07000;
	float n_out23p0 = dot(n_out21p0, vec3(0.333333, 0.333333, 0.333333)) * n_in23p1;

// VectorOp:20
	vec3 n_out20p0 = n_out33p0 + vec3(n_out23p0);

// Worley2D:17
	vec3 n_in17p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in17p2 = 5.00000;
	float n_in17p3 = 1.00000;
	float n_out17p0;
	float n_out17p1;
	{
		vec2 n_out17p0n_out17p1 = cellular2dNoiseFunc((n_out20p0.xy+n_in17p1.xy)*n_in17p2, min(max(n_in17p3, 0.0), 1.0));
		n_out17p0 = n_out17p0n_out17p1.x;
		n_out17p1 = n_out17p0n_out17p1.y;
	}

// Texture:19
	vec4 tex_vtx_19_read = texture(tex_vtx_19, vec3(n_out17p0).xy);
	vec3 n_out19p0 = tex_vtx_19_read.rgb;
	float n_out19p1 = tex_vtx_19_read.a;

// ScalarOp:22
	float n_in22p1 = 2.00000;
	float n_out22p0 = pow(dot(n_out19p0, vec3(0.333333, 0.333333, 0.333333)), n_in22p1);

// ScalarOp:29
	float n_out29p0 = dot(n_out28p0, vec3(0.333333, 0.333333, 0.333333)) * n_out22p0;

// VectorOp:6
	vec3 n_in6p1 = vec3(0.00000, 0.07000, 0.00000);
	vec3 n_out6p0 = vec3(n_out29p0) * n_in6p1;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:3
	vec3 n_in3p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out3p0 = n_out2p0 - n_in3p1;

// VectorLen:4
	float n_out4p0 = length(n_out3p0);

// Texture:5
	vec4 tex_vtx_5_read = texture(tex_vtx_5, vec3(n_out4p0).xy);
	vec3 n_out5p0 = tex_vtx_5_read.rgb;
	float n_out5p1 = tex_vtx_5_read.a;

// VectorOp:24
	vec3 n_in24p1 = vec3(0.00000, 0.30000, 0.00000);
	vec3 n_out24p0 = n_out5p0 * n_in24p1;

// VectorOp:25
	vec3 n_out25p0 = n_out6p0 + n_out24p0;

// Texture:14
	vec4 tex_vtx_14_read = texture(tex_vtx_14, vec3(n_out4p0).xy);
	vec3 n_out14p0 = tex_vtx_14_read.rgb;
	float n_out14p1 = tex_vtx_14_read.a;

// Texture:9
	vec4 tex_vtx_9_read = texture(tex_vtx_9, UV.xy);
	vec3 n_out9p0 = tex_vtx_9_read.rgb;
	float n_out9p1 = tex_vtx_9_read.a;

// VectorDecompose:12
	float n_out12p0 = n_out2p0.x;
	float n_out12p1 = n_out2p0.y;
	float n_out12p2 = n_out2p0.z;

// Texture:10
	vec4 tex_vtx_10_read = texture(tex_vtx_10, vec3(n_out12p1).xy);
	vec3 n_out10p0 = tex_vtx_10_read.rgb;
	float n_out10p1 = tex_vtx_10_read.a;

// VectorCompose:13
	float n_in13p1 = 0.00000;
	vec3 n_out13p0 = vec3(dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)), n_in13p1, dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)));

// VectorOp:15
	vec3 n_out15p0 = n_out14p0 * n_out13p0;

// Texture:31
	vec4 tex_vtx_31_read = texture(tex_vtx_31, UV.xy);
	vec3 n_out31p0 = tex_vtx_31_read.rgb;
	float n_out31p1 = tex_vtx_31_read.a;

// VectorOp:32
	vec3 n_in32p1 = vec3(1.00000, 0.00000, 1.00000);
	vec3 n_out32p0 = n_out31p0 * n_in32p1;

// VectorOp:30
	vec3 n_out30p0 = n_out15p0 * n_out32p0;

// VectorOp:16
	vec3 n_out16p0 = n_out25p0 + n_out30p0;

// Input:8
	vec3 n_out8p0 = VERTEX;

// VectorOp:7
	vec3 n_out7p0 = n_out16p0 + n_out8p0;

// Output:0
	VERTEX = n_out7p0;

}

void fragment() {
// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, UV.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// ScalarOp:9
	float n_in9p1 = 2.00000;
	float n_out9p0 = pow(dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333)), n_in9p1);

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, vec3(n_out9p0).xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:3
	vec3 n_in3p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out3p0 = n_out2p0 - n_in3p1;

// VectorLen:4
	float n_out4p0 = length(n_out3p0);

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, vec3(n_out4p0).xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:11
	vec3 n_in11p1 = vec3(0.40000, 0.20000, 0.03000);
	vec3 n_out11p0 = n_out5p0 * n_in11p1;

// VectorOp:7
	vec3 n_out7p0 = n_out10p0 * n_out11p0;

// Scalar:24
	float n_out24p0 = 1.000000;

// Texture:21
	vec4 tex_frg_21_read = textureLod(tex_frg_21, UV.xy, n_out24p0);
	vec3 n_out21p0 = tex_frg_21_read.rgb;
	float n_out21p1 = tex_frg_21_read.a;

// Texture:22
	vec4 tex_frg_22_read = texture(tex_frg_22, n_out21p0.xy);
	vec3 n_out22p0 = tex_frg_22_read.rgb;
	float n_out22p1 = tex_frg_22_read.a;

// VectorOp:23
	vec3 n_out23p0 = n_out7p0 * n_out22p0;

// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// VectorOp:25
	vec3 n_in25p1 = vec3(1.50000, 1.50000, 0.00000);
	vec3 n_out25p0 = n_out13p0 * n_in25p1;

// Texture:17
	vec4 tex_frg_17_read = texture(tex_frg_17, UV.xy);
	vec3 n_out17p0 = tex_frg_17_read.rgb;
	float n_out17p1 = tex_frg_17_read.a;

// ScalarOp:16
	float n_in16p1 = 0.07000;
	float n_out16p0 = dot(n_out17p0, vec3(0.333333, 0.333333, 0.333333)) * n_in16p1;

// VectorOp:15
	vec3 n_out15p0 = n_out25p0 + vec3(n_out16p0);

// Worley2D:12
	vec3 n_in12p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in12p2 = 5.00000;
	float n_in12p3 = 1.00000;
	float n_out12p0;
	float n_out12p1;
	{
		vec2 n_out12p0n_out12p1 = cellular2dNoiseFunc((n_out15p0.xy+n_in12p1.xy)*n_in12p2, min(max(n_in12p3, 0.0), 1.0));
		n_out12p0 = n_out12p0n_out12p1.x;
		n_out12p1 = n_out12p0n_out12p1.y;
	}

// Texture:14
	vec4 tex_frg_14_read = texture(tex_frg_14, vec3(n_out12p0).xy);
	vec3 n_out14p0 = tex_frg_14_read.rgb;
	float n_out14p1 = tex_frg_14_read.a;

// ScalarOp:18
	float n_in18p1 = 2.00000;
	float n_out18p0 = pow(dot(n_out14p0, vec3(0.333333, 0.333333, 0.333333)), n_in18p1);

// Texture:19
	vec4 tex_frg_19_read = texture(tex_frg_19, vec3(n_out18p0).xy);
	vec3 n_out19p0 = tex_frg_19_read.rgb;
	float n_out19p1 = tex_frg_19_read.a;

// VectorMix:20
	vec3 n_out20p0 = mix(n_out23p0, n_out19p0, n_out14p0);

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, n_out5p0.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Output:0
	ALBEDO = n_out20p0;
	ALPHA = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 1707.64, -223.643 )
modes/depth_draw = 3
flags/unshaded = true
nodes/vertex/0/position = Vector2( 2120, 440 )
nodes/vertex/2/node = SubResource( 59 )
nodes/vertex/2/position = Vector2( -100, 340 )
nodes/vertex/3/node = SubResource( 72 )
nodes/vertex/3/position = Vector2( 180, 180 )
nodes/vertex/4/node = SubResource( 79 )
nodes/vertex/4/position = Vector2( 400, 220 )
nodes/vertex/5/node = SubResource( 80 )
nodes/vertex/5/position = Vector2( 582.633, 75 )
nodes/vertex/6/node = SubResource( 81 )
nodes/vertex/6/position = Vector2( 1120, 0 )
nodes/vertex/7/node = SubResource( 82 )
nodes/vertex/7/position = Vector2( 1920, 440 )
nodes/vertex/8/node = SubResource( 83 )
nodes/vertex/8/position = Vector2( 1720, 540 )
nodes/vertex/9/node = SubResource( 84 )
nodes/vertex/9/position = Vector2( 460, 320 )
nodes/vertex/10/node = SubResource( 46 )
nodes/vertex/10/position = Vector2( 500, 540 )
nodes/vertex/12/node = SubResource( 47 )
nodes/vertex/12/position = Vector2( 260, 480 )
nodes/vertex/13/node = SubResource( 48 )
nodes/vertex/13/position = Vector2( 680, 560 )
nodes/vertex/14/node = SubResource( 51 )
nodes/vertex/14/position = Vector2( 860, 280 )
nodes/vertex/15/node = SubResource( 52 )
nodes/vertex/15/position = Vector2( 1080, 500 )
nodes/vertex/16/node = SubResource( 53 )
nodes/vertex/16/position = Vector2( 1700, 360 )
nodes/vertex/17/node = SubResource( 54 )
nodes/vertex/17/position = Vector2( 380, -180 )
nodes/vertex/18/node = SubResource( 55 )
nodes/vertex/18/position = Vector2( -180, -280 )
nodes/vertex/19/node = SubResource( 58 )
nodes/vertex/19/position = Vector2( 600, -220 )
nodes/vertex/20/node = SubResource( 60 )
nodes/vertex/20/position = Vector2( 200, -180 )
nodes/vertex/21/node = SubResource( 61 )
nodes/vertex/21/position = Vector2( -280, -200 )
nodes/vertex/22/node = SubResource( 62 )
nodes/vertex/22/position = Vector2( 780, -100 )
nodes/vertex/23/node = SubResource( 63 )
nodes/vertex/23/position = Vector2( -40, -120 )
nodes/vertex/24/node = SubResource( 64 )
nodes/vertex/24/position = Vector2( 920, 160 )
nodes/vertex/25/node = SubResource( 65 )
nodes/vertex/25/position = Vector2( 1320, 140 )
nodes/vertex/26/node = SubResource( 66 )
nodes/vertex/26/position = Vector2( 180, -320 )
nodes/vertex/27/node = SubResource( 67 )
nodes/vertex/27/position = Vector2( 380, -300 )
nodes/vertex/28/node = SubResource( 70 )
nodes/vertex/28/position = Vector2( 620, -420 )
nodes/vertex/29/node = SubResource( 71 )
nodes/vertex/29/position = Vector2( 960, -180 )
nodes/vertex/30/node = SubResource( 73 )
nodes/vertex/30/position = Vector2( 1480, 520 )
nodes/vertex/31/node = SubResource( 76 )
nodes/vertex/31/position = Vector2( 960, 740 )
nodes/vertex/32/node = SubResource( 77 )
nodes/vertex/32/position = Vector2( 1260, 700 )
nodes/vertex/33/node = SubResource( 78 )
nodes/vertex/33/position = Vector2( 0, -240 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 4, 0, 5, 0, 8, 0, 7, 1, 7, 0, 0, 0, 12, 1, 10, 0, 9, 0, 13, 0, 14, 0, 15, 0, 13, 0, 15, 1, 10, 0, 13, 2, 4, 0, 14, 0, 2, 0, 12, 0, 17, 0, 19, 0, 20, 0, 17, 0, 19, 0, 22, 0, 21, 0, 23, 0, 23, 0, 20, 1, 5, 0, 24, 0, 6, 0, 25, 0, 24, 0, 25, 1, 18, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 22, 0, 29, 1, 29, 0, 6, 0, 31, 0, 32, 0, 32, 0, 30, 1, 16, 0, 7, 0, 25, 0, 16, 0, 15, 0, 30, 0, 30, 0, 16, 1, 18, 0, 33, 0, 33, 0, 20, 0 )
nodes/fragment/0/position = Vector2( 2200, 0 )
nodes/fragment/2/node = SubResource( 20 )
nodes/fragment/2/position = Vector2( 220, 120 )
nodes/fragment/3/node = SubResource( 31 )
nodes/fragment/3/position = Vector2( 400, 100 )
nodes/fragment/4/node = SubResource( 32 )
nodes/fragment/4/position = Vector2( 600, 120 )
nodes/fragment/5/node = SubResource( 35 )
nodes/fragment/5/position = Vector2( 780, 80 )
nodes/fragment/6/node = SubResource( 38 )
nodes/fragment/6/position = Vector2( 400, -140 )
nodes/fragment/7/node = SubResource( 39 )
nodes/fragment/7/position = Vector2( 1380, -120 )
nodes/fragment/8/node = SubResource( 42 )
nodes/fragment/8/position = Vector2( 1200, 420 )
nodes/fragment/9/node = SubResource( 43 )
nodes/fragment/9/position = Vector2( 620, -100 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( 800, -140 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( 1000, 20 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( 740, -400 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( 120, -420 )
nodes/fragment/14/node = SubResource( 10 )
nodes/fragment/14/position = Vector2( 960, -480 )
nodes/fragment/15/node = SubResource( 11 )
nodes/fragment/15/position = Vector2( 560, -400 )
nodes/fragment/16/node = SubResource( 12 )
nodes/fragment/16/position = Vector2( 360, -280 )
nodes/fragment/17/node = SubResource( 15 )
nodes/fragment/17/position = Vector2( 80, -340 )
nodes/fragment/18/node = SubResource( 16 )
nodes/fragment/18/position = Vector2( 1140, -380 )
nodes/fragment/19/node = SubResource( 19 )
nodes/fragment/19/position = Vector2( 1340, -360 )
nodes/fragment/20/node = SubResource( 21 )
nodes/fragment/20/position = Vector2( 1940, -220 )
nodes/fragment/21/node = SubResource( 24 )
nodes/fragment/21/position = Vector2( 1240, 100 )
nodes/fragment/22/node = SubResource( 27 )
nodes/fragment/22/position = Vector2( 1480, 60 )
nodes/fragment/23/node = SubResource( 28 )
nodes/fragment/23/position = Vector2( 1680, -60 )
nodes/fragment/24/node = SubResource( 29 )
nodes/fragment/24/position = Vector2( 1040, 260 )
nodes/fragment/25/node = SubResource( 30 )
nodes/fragment/25/position = Vector2( 360, -420 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 4, 0, 5, 0, 5, 0, 8, 0, 6, 0, 9, 0, 9, 0, 10, 0, 10, 0, 7, 0, 5, 0, 11, 0, 11, 0, 7, 1, 12, 0, 14, 0, 15, 0, 12, 0, 16, 0, 15, 1, 17, 0, 16, 0, 14, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 1, 14, 0, 20, 2, 21, 0, 22, 0, 7, 0, 23, 0, 22, 0, 23, 1, 20, 0, 0, 0, 23, 0, 20, 0, 24, 0, 21, 1, 8, 0, 0, 1, 13, 0, 25, 0, 25, 0, 15, 0 )

[sub_resource type="ShaderMaterial" id=86]
shader = SubResource( 85 )

[sub_resource type="Animation" id=87]
length = 6.5
tracks/0/type = "value"
tracks/0/path = NodePath("MeshInstance:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 6.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}

[node name="Cookie" type="Spatial"]
script = ExtResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 86 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
"anims/New Anim" = SubResource( 87 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.939693, 0.34202, 0, -0.34202, 0.939693, 0, 0.672556, 2.00949 )
