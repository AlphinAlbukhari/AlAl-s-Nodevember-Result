[gd_scene load_steps=97 format=2]

[ext_resource path="res://60fps image sequence export.gd" type="Script" id=1]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 4, 2 )
subdivide_width = 256
subdivide_depth = 128

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0.625, 0.784091 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = SubResource( 4 )

[sub_resource type="Gradient" id=6]
offsets = PoolRealArray( 0, 0.596591, 0.852273, 1 )
colors = PoolColorArray( 0.0820313, 0.0477495, 0, 1, 0.25, 0.145522, 0, 1, 0.851213, 0.855469, 0.310776, 1, 0, 1, 0.132813, 1 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 6 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = SubResource( 7 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 31

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 31

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.6, 0.6, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorLen" id=17]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=18]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=19]

[sub_resource type="Gradient" id=20]
offsets = PoolRealArray( 0.426136, 0.732955 )
colors = PoolColorArray( 0, 0, 0, 1, 0.859375, 0.993408, 1, 1 )

[sub_resource type="GradientTexture" id=21]
gradient = SubResource( 20 )

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = SubResource( 21 )

[sub_resource type="VisualShaderNodeVectorInterp" id=23]

[sub_resource type="VisualShaderNodeScalarOp" id=24]
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 5

[sub_resource type="Gradient" id=25]
offsets = PoolRealArray( 0.181818, 1 )
colors = PoolColorArray( 0, 0.384644, 0.535156, 1, 0, 0.976563, 1, 1 )

[sub_resource type="GradientTexture" id=26]
gradient = SubResource( 25 )

[sub_resource type="VisualShaderNodeTexture" id=27]
texture = SubResource( 26 )

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 6

[sub_resource type="VisualShaderNodeScalarClamp" id=29]

[sub_resource type="VisualShaderNodeVectorOp" id=30]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.6, 0.6, 0 ) ]
operator = 1

[sub_resource type="Gradient" id=31]
offsets = PoolRealArray( 0.721591, 0.727273, 0.818182 )
colors = PoolColorArray( 0.403922, 0.380392, 0.168627, 0, 0.402344, 0.378948, 0.17131, 1, 0.403922, 0.380392, 0.168627, 0 )

[sub_resource type="GradientTexture" id=32]
gradient = SubResource( 31 )

[sub_resource type="VisualShaderNodeTexture" id=33]
texture = SubResource( 32 )

[sub_resource type="VisualShaderNodeVectorInterp" id=34]
output_port_for_preview = 0

[sub_resource type="Gradient" id=35]
offsets = PoolRealArray( 0.494318, 0.5 )
colors = PoolColorArray( 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=36]
gradient = SubResource( 35 )

[sub_resource type="VisualShaderNodeTexture" id=37]
texture = SubResource( 36 )

[sub_resource type="Gradient" id=38]
offsets = PoolRealArray( 0.744318, 0.755682 )
colors = PoolColorArray( 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=39]
gradient = SubResource( 38 )

[sub_resource type="VisualShaderNodeTexture" id=40]
texture = SubResource( 39 )

[sub_resource type="VisualShaderNodeVectorOp" id=41]

[sub_resource type="OpenSimplexNoise" id=42]
period = 26.7
persistence = 1.0

[sub_resource type="NoiseTexture" id=43]
noise = SubResource( 42 )

[sub_resource type="VisualShaderNodeTexture" id=44]
texture = SubResource( 43 )

[sub_resource type="Gradient" id=45]
offsets = PoolRealArray( 0.880682, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.769531, 0.769531, 0.769531, 1 )

[sub_resource type="GradientTexture" id=46]
gradient = SubResource( 45 )

[sub_resource type="VisualShaderNodeTexture" id=47]
texture = SubResource( 46 )

[sub_resource type="VisualShaderNodeVectorInterp" id=48]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=49]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=50]

[sub_resource type="VisualShaderNodeVectorLen" id=51]
output_port_for_preview = 0

[sub_resource type="Gradient" id=52]
colors = PoolColorArray( 0, 0.662745, 0.0705882, 1, 0, 1, 0.129412, 1 )

[sub_resource type="GradientTexture" id=53]
gradient = SubResource( 52 )

[sub_resource type="VisualShaderNodeTexture" id=54]
texture = SubResource( 53 )

[sub_resource type="VisualShaderNodeInput" id=55]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorDecompose" id=56]

[sub_resource type="VisualShaderNodeScalarOp" id=57]
default_input_values = [ 0, 0.0, 1, 1.2 ]

[sub_resource type="Gradient" id=58]
offsets = PoolRealArray( 0.994318, 1 )

[sub_resource type="GradientTexture" id=59]
gradient = SubResource( 58 )

[sub_resource type="VisualShaderNodeTexture" id=60]
texture = SubResource( 59 )

[sub_resource type="VisualShaderNodeScalarOp" id=61]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=62]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=63]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=64]

[sub_resource type="OpenSimplexNoise" id=65]
seed = 258
period = 88.8

[sub_resource type="NoiseTexture" id=66]
noise = SubResource( 65 )

[sub_resource type="VisualShaderNodeTexture" id=67]
texture = SubResource( 66 )

[sub_resource type="VisualShaderNodeScalarOp" id=68]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=69]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=70]
texture = SubResource( 4 )

[sub_resource type="VisualShaderNodeScalarFunc" id=71]
function = 31

[sub_resource type="VisualShaderNodeVectorOp" id=72]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, -0.5, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=73]

[sub_resource type="VisualShaderNodeVectorDecompose" id=74]

[sub_resource type="VisualShaderNodeScalarFunc" id=75]
function = 15

[sub_resource type="VisualShaderNodeVectorInterp" id=76]

[sub_resource type="VisualShaderNodeVectorOp" id=77]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 0.18, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=78]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=79]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=80]

[sub_resource type="VisualShaderNodeVectorOp" id=81]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.05, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=82]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="Gradient" id=83]
offsets = PoolRealArray( 0.778409, 0.795455 )

[sub_resource type="GradientTexture" id=84]
gradient = SubResource( 83 )

[sub_resource type="VisualShaderNodeTexture" id=85]
texture = SubResource( 84 )

[sub_resource type="VisualShaderNodeVectorOp" id=86]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=87]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=88]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.6, 0.6, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=89]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=90]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=91]

[sub_resource type="VisualShaderNodeTexture" id=92]
texture = SubResource( 66 )

[sub_resource type="VisualShader" id=93]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, specular_schlick_ggx, unshaded;

uniform sampler2D tex_vtx_9;
uniform sampler2D tex_vtx_24;
uniform sampler2D tex_vtx_12;
uniform sampler2D tex_frg_9;
uniform sampler2D tex_frg_11;
uniform sampler2D tex_frg_12;
uniform sampler2D tex_frg_24;
uniform sampler2D tex_frg_27;
uniform sampler2D tex_frg_30;
uniform sampler2D tex_frg_35;
uniform sampler2D tex_frg_40;
uniform sampler2D tex_frg_36;
uniform sampler2D tex_frg_32;
uniform sampler2D tex_frg_33;
uniform sampler2D tex_frg_44;



void vertex() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorOp:7
	vec3 n_in7p1 = vec3(2.00000, 1.00000, 0.00000);
	vec3 n_out7p0 = n_out4p0 * n_in7p1;

// Texture:9
	vec4 tex_vtx_9_read = texture(tex_vtx_9, n_out7p0.xy);
	vec3 n_out9p0 = tex_vtx_9_read.rgb;
	float n_out9p1 = tex_vtx_9_read.a;

// ScalarOp:10
	float n_in10p1 = 0.20000;
	float n_out10p0 = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)) * n_in10p1;

// VectorOp:5
	vec3 n_in5p1 = vec3(0.60000, 0.60000, 0.00000);
	vec3 n_out5p0 = n_out7p0 - n_in5p1;

// VectorOp:8
	vec3 n_out8p0 = vec3(n_out10p0) + n_out5p0;

// VectorLen:6
	float n_out6p0 = length(n_out8p0);

// ScalarOp:11
	float n_in11p1 = 2.00000;
	float n_out11p0 = n_out6p0 * n_in11p1;

// Texture:24
	vec4 tex_vtx_24_read = texture(tex_vtx_24, vec3(n_out11p0).xy);
	vec3 n_out24p0 = tex_vtx_24_read.rgb;
	float n_out24p1 = tex_vtx_24_read.a;

// VectorMix:23
	vec3 n_in23p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out23p0 = mix(n_in23p0, n_out9p0, n_out24p0);

// VectorOp:20
	vec3 n_in20p1 = vec3(0.00000, 0.10000, 0.00000);
	vec3 n_out20p0 = n_out23p0 * n_in20p1;

// Texture:12
	vec4 tex_vtx_12_read = texture(tex_vtx_12, vec3(n_out11p0).xy);
	vec3 n_out12p0 = tex_vtx_12_read.rgb;
	float n_out12p1 = tex_vtx_12_read.a;

// ScalarFunc:13
	float n_out13p0 = 1.0 - dot(n_out12p0, vec3(0.333333, 0.333333, 0.333333));

// VectorOp:14
	vec3 n_in14p1 = vec3(0.00000, -0.50000, 0.00000);
	vec3 n_out14p0 = vec3(n_out13p0) * n_in14p1;

// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorOp:3
	vec3 n_in3p1 = vec3(1.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = n_out2p0 + n_in3p1;

// VectorOp:15
	vec3 n_out15p0 = n_out14p0 + n_out3p0;

// VectorOp:21
	vec3 n_out21p0 = n_out20p0 + n_out15p0;

// VectorOp:19
	vec3 n_in19p1 = vec3(2.00000, 0.18000, 0.00000);
	vec3 n_out19p0 = n_out3p0 - n_in19p1;

// VectorDecompose:16
	float n_out16p0 = n_out4p0.x;
	float n_out16p1 = n_out4p0.y;
	float n_out16p2 = n_out4p0.z;

// ScalarFunc:17
	float n_out17p0 = round(n_out16p0);

// VectorMix:18
	vec3 n_out18p0 = mix(n_out21p0, n_out19p0, vec3(n_out17p0));

// Output:0
	VERTEX = n_out18p0;
	COLOR.rgb = n_out18p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:6
	vec3 n_in6p1 = vec3(2.00000, 1.00000, 0.00000);
	vec3 n_out6p0 = n_out2p0 * n_in6p1;

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, n_out6p0.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// ScalarOp:10
	float n_in10p1 = 0.20000;
	float n_out10p0 = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)) * n_in10p1;

// VectorOp:3
	vec3 n_in3p1 = vec3(0.60000, 0.60000, 0.00000);
	vec3 n_out3p0 = n_out6p0 - n_in3p1;

// VectorOp:8
	vec3 n_out8p0 = vec3(n_out10p0) + n_out3p0;

// VectorLen:4
	float n_out4p0 = length(n_out8p0);

// ScalarOp:5
	float n_in5p1 = 2.00000;
	float n_out5p0 = n_out4p0 * n_in5p1;

// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, vec3(n_out5p0).xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// ScalarFunc:14
	float n_out14p0 = 1.0 - dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:15
	float n_in15p1 = 0.60000;
	float n_out15p0 = n_out14p0 * n_in15p1;

// ScalarFunc:16
	float n_out16p0 = 1.0 - n_out15p0;

// Texture:12
	vec4 tex_frg_12_read = texture(tex_frg_12, vec3(n_out5p0).xy);
	vec3 n_out12p0 = tex_frg_12_read.rgb;
	float n_out12p1 = tex_frg_12_read.a;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out16p0) * n_out12p0;

// VectorOp:19
	vec3 n_in19p1 = vec3(1.60000, 0.60000, 0.00000);
	vec3 n_out19p0 = n_out6p0 - n_in19p1;

// VectorOp:22
	vec3 n_out22p0 = vec3(n_out10p0) + n_out19p0;

// VectorLen:20
	float n_out20p0 = length(n_out22p0);

// ScalarOp:21
	float n_in21p1 = 2.00000;
	float n_out21p0 = n_out20p0 * n_in21p1;

// Texture:24
	vec4 tex_frg_24_read = texture(tex_frg_24, vec3(n_out21p0).xy);
	vec3 n_out24p0 = tex_frg_24_read.rgb;
	float n_out24p1 = tex_frg_24_read.a;

// ScalarOp:26
	float n_in26p1 = 5.00000;
	float n_out26p0 = pow(dot(n_out24p0, vec3(0.333333, 0.333333, 0.333333)), n_in26p1);

// ScalarClamp:29
	float n_in29p1 = 0.00000;
	float n_in29p2 = 1.00000;
	float n_out29p0 = clamp(n_out26p0, n_in29p1, n_in29p2);

// Texture:27
	vec4 tex_frg_27_read = texture(tex_frg_27, vec3(n_out21p0).xy);
	vec3 n_out27p0 = tex_frg_27_read.rgb;
	float n_out27p1 = tex_frg_27_read.a;

// VectorOp:28
	vec3 n_out28p0 = max(vec3(n_out29p0), n_out27p0);

// VectorDecompose:17
	float n_out17p0 = n_out2p0.x;
	float n_out17p1 = n_out2p0.y;
	float n_out17p2 = n_out2p0.z;

// ScalarFunc:18
	float n_out18p0 = round(n_out17p0);

// VectorMix:25
	vec3 n_out25p0 = mix(n_out13p0, n_out28p0, vec3(n_out18p0));

// Texture:30
	vec4 tex_frg_30_read = texture(tex_frg_30, vec3(n_out21p0).xy);
	vec3 n_out30p0 = tex_frg_30_read.rgb;
	float n_out30p1 = tex_frg_30_read.a;

// VectorMix:31
	vec3 n_out31p0 = mix(n_out25p0, n_out30p0, vec3(n_out30p1));

// Texture:35
	vec4 tex_frg_35_read = texture(tex_frg_35, n_out6p0.xy);
	vec3 n_out35p0 = tex_frg_35_read.rgb;
	float n_out35p1 = tex_frg_35_read.a;

// Texture:40
	vec4 tex_frg_40_read = texture(tex_frg_40, n_out35p0.xy);
	vec3 n_out40p0 = tex_frg_40_read.rgb;
	float n_out40p1 = tex_frg_40_read.a;

// Texture:36
	vec4 tex_frg_36_read = texture(tex_frg_36, vec3(n_out5p0).xy);
	vec3 n_out36p0 = tex_frg_36_read.rgb;
	float n_out36p1 = tex_frg_36_read.a;

// ScalarOp:38
	float n_out38p0 = dot(n_out36p0, vec3(0.333333, 0.333333, 0.333333)) - n_out18p0;

// ScalarClamp:39
	float n_in39p1 = 0.00000;
	float n_in39p2 = 1.00000;
	float n_out39p0 = clamp(n_out38p0, n_in39p1, n_in39p2);

// VectorMix:37
	vec3 n_out37p0 = mix(n_out31p0, n_out40p0, vec3(n_out39p0));

// Texture:32
	vec4 tex_frg_32_read = texture(tex_frg_32, UV.xy);
	vec3 n_out32p0 = tex_frg_32_read.rgb;
	float n_out32p1 = tex_frg_32_read.a;

// Texture:33
	vec4 tex_frg_33_read = texture(tex_frg_33, vec3(n_out21p0).xy);
	vec3 n_out33p0 = tex_frg_33_read.rgb;
	float n_out33p1 = tex_frg_33_read.a;

// VectorOp:34
	vec3 n_out34p0 = n_out32p0 + n_out33p0;

// Input:41
	vec3 n_out41p0 = COLOR.rgb;

// VectorDecompose:42
	float n_out42p0 = n_out41p0.x;
	float n_out42p1 = n_out41p0.y;
	float n_out42p2 = n_out41p0.z;

// ScalarOp:43
	float n_in43p1 = 1.20000;
	float n_out43p0 = n_out42p1 + n_in43p1;

// Texture:44
	vec4 tex_frg_44_read = texture(tex_frg_44, vec3(n_out43p0).xy);
	vec3 n_out44p0 = tex_frg_44_read.rgb;
	float n_out44p1 = tex_frg_44_read.a;

// ScalarOp:45
	float n_out45p0 = dot(n_out34p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out44p0, vec3(0.333333, 0.333333, 0.333333));

// Output:0
	ALBEDO = n_out37p0;
	ALPHA = n_out45p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 269.488, 53.5893 )
modes/depth_draw = 3
flags/unshaded = true
nodes/vertex/0/position = Vector2( 1960, 120 )
nodes/vertex/2/node = SubResource( 78 )
nodes/vertex/2/position = Vector2( 400, 180 )
nodes/vertex/3/node = SubResource( 86 )
nodes/vertex/3/position = Vector2( 580, 180 )
nodes/vertex/4/node = SubResource( 87 )
nodes/vertex/4/position = Vector2( -779.434, 0.656456 )
nodes/vertex/5/node = SubResource( 88 )
nodes/vertex/5/position = Vector2( -399.434, 60.6565 )
nodes/vertex/6/node = SubResource( 89 )
nodes/vertex/6/position = Vector2( 220.566, -19.3435 )
nodes/vertex/7/node = SubResource( 90 )
nodes/vertex/7/position = Vector2( -599.434, 20.6565 )
nodes/vertex/8/node = SubResource( 91 )
nodes/vertex/8/position = Vector2( 40.5665, -39.3435 )
nodes/vertex/9/node = SubResource( 92 )
nodes/vertex/9/position = Vector2( -419.434, -199.344 )
nodes/vertex/10/node = SubResource( 68 )
nodes/vertex/10/position = Vector2( -175.04, -40.7348 )
nodes/vertex/11/node = SubResource( 69 )
nodes/vertex/11/position = Vector2( 400.566, 0.656456 )
nodes/vertex/12/node = SubResource( 70 )
nodes/vertex/12/position = Vector2( 580, 20 )
nodes/vertex/13/node = SubResource( 71 )
nodes/vertex/13/position = Vector2( 781.616, 43.5508 )
nodes/vertex/14/node = SubResource( 72 )
nodes/vertex/14/position = Vector2( 980, 40 )
nodes/vertex/15/node = SubResource( 73 )
nodes/vertex/15/position = Vector2( 1170.27, 126.551 )
nodes/vertex/16/node = SubResource( 74 )
nodes/vertex/16/position = Vector2( 320, 320 )
nodes/vertex/17/node = SubResource( 75 )
nodes/vertex/17/position = Vector2( 1180, 340 )
nodes/vertex/18/node = SubResource( 76 )
nodes/vertex/18/position = Vector2( 1720, 200 )
nodes/vertex/19/node = SubResource( 77 )
nodes/vertex/19/position = Vector2( 920.994, 259.03 )
nodes/vertex/20/node = SubResource( 79 )
nodes/vertex/20/position = Vector2( 1020, -180 )
nodes/vertex/21/node = SubResource( 80 )
nodes/vertex/21/position = Vector2( 1340, 60 )
nodes/vertex/22/node = SubResource( 81 )
nodes/vertex/22/position = Vector2( 1540, 120 )
nodes/vertex/23/node = SubResource( 82 )
nodes/vertex/23/position = Vector2( 780, -160 )
nodes/vertex/24/node = SubResource( 85 )
nodes/vertex/24/position = Vector2( 580, -160 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 6, 0, 11, 0, 4, 0, 7, 0, 7, 0, 5, 0, 5, 0, 8, 1, 8, 0, 6, 0, 7, 0, 9, 0, 9, 0, 10, 0, 10, 0, 8, 0, 11, 0, 12, 0, 12, 0, 13, 0, 14, 0, 15, 0, 3, 0, 15, 1, 13, 0, 14, 0, 4, 0, 16, 0, 17, 0, 18, 2, 3, 0, 19, 0, 19, 0, 18, 1, 18, 0, 0, 0, 16, 0, 17, 0, 20, 0, 21, 0, 15, 0, 21, 1, 21, 0, 22, 0, 21, 0, 18, 0, 23, 0, 20, 0, 9, 0, 23, 1, 11, 0, 24, 0, 24, 0, 23, 2, 18, 0, 0, 6 )
nodes/fragment/0/position = Vector2( 3540, 20 )
nodes/fragment/2/node = SubResource( 16 )
nodes/fragment/2/position = Vector2( -280, 60 )
nodes/fragment/3/node = SubResource( 30 )
nodes/fragment/3/position = Vector2( 100, 120 )
nodes/fragment/4/node = SubResource( 51 )
nodes/fragment/4/position = Vector2( 720, 40 )
nodes/fragment/5/node = SubResource( 62 )
nodes/fragment/5/position = Vector2( 900, 60 )
nodes/fragment/6/node = SubResource( 63 )
nodes/fragment/6/position = Vector2( -100, 80 )
nodes/fragment/8/node = SubResource( 64 )
nodes/fragment/8/position = Vector2( 540, 20 )
nodes/fragment/9/node = SubResource( 67 )
nodes/fragment/9/position = Vector2( 80, -140 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 324.394, 18.6087 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( 1100, -60 )
nodes/fragment/12/node = SubResource( 8 )
nodes/fragment/12/position = Vector2( 1320, 140 )
nodes/fragment/13/node = SubResource( 9 )
nodes/fragment/13/position = Vector2( 1840, 60 )
nodes/fragment/14/node = SubResource( 10 )
nodes/fragment/14/position = Vector2( 1260, 20 )
nodes/fragment/15/node = SubResource( 11 )
nodes/fragment/15/position = Vector2( 1460, -20 )
nodes/fragment/16/node = SubResource( 12 )
nodes/fragment/16/position = Vector2( 1640, 60 )
nodes/fragment/17/node = SubResource( 13 )
nodes/fragment/17/position = Vector2( 401.836, -101.449 )
nodes/fragment/18/node = SubResource( 14 )
nodes/fragment/18/position = Vector2( 1380, -100 )
nodes/fragment/19/node = SubResource( 15 )
nodes/fragment/19/position = Vector2( 100, 260 )
nodes/fragment/20/node = SubResource( 17 )
nodes/fragment/20/position = Vector2( 720, 240 )
nodes/fragment/21/node = SubResource( 18 )
nodes/fragment/21/position = Vector2( 900, 180 )
nodes/fragment/22/node = SubResource( 19 )
nodes/fragment/22/position = Vector2( 540, 220 )
nodes/fragment/24/node = SubResource( 22 )
nodes/fragment/24/position = Vector2( 1520, 180 )
nodes/fragment/25/node = SubResource( 23 )
nodes/fragment/25/position = Vector2( 2260, 100 )
nodes/fragment/26/node = SubResource( 24 )
nodes/fragment/26/position = Vector2( 1720, 180 )
nodes/fragment/27/node = SubResource( 27 )
nodes/fragment/27/position = Vector2( 1720, 300 )
nodes/fragment/28/node = SubResource( 28 )
nodes/fragment/28/position = Vector2( 2080, 220 )
nodes/fragment/29/node = SubResource( 29 )
nodes/fragment/29/position = Vector2( 1900, 180 )
nodes/fragment/30/node = SubResource( 33 )
nodes/fragment/30/position = Vector2( 2120, 320 )
nodes/fragment/31/node = SubResource( 34 )
nodes/fragment/31/position = Vector2( 2469.79, 176.42 )
nodes/fragment/32/node = SubResource( 37 )
nodes/fragment/32/position = Vector2( 2060, -280 )
nodes/fragment/33/node = SubResource( 40 )
nodes/fragment/33/position = Vector2( 2080, -80 )
nodes/fragment/34/node = SubResource( 41 )
nodes/fragment/34/position = Vector2( 2360, -60 )
nodes/fragment/35/node = SubResource( 44 )
nodes/fragment/35/position = Vector2( 2300, -300 )
nodes/fragment/36/node = SubResource( 47 )
nodes/fragment/36/position = Vector2( 2300, -500 )
nodes/fragment/37/node = SubResource( 48 )
nodes/fragment/37/position = Vector2( 2960, -100 )
nodes/fragment/38/node = SubResource( 49 )
nodes/fragment/38/position = Vector2( 2520, -280 )
nodes/fragment/39/node = SubResource( 50 )
nodes/fragment/39/position = Vector2( 2715.03, -244.206 )
nodes/fragment/40/node = SubResource( 54 )
nodes/fragment/40/position = Vector2( 2540, -160 )
nodes/fragment/41/node = SubResource( 55 )
nodes/fragment/41/position = Vector2( 2640, 240 )
nodes/fragment/42/node = SubResource( 56 )
nodes/fragment/42/position = Vector2( 2820, 220 )
nodes/fragment/43/node = SubResource( 57 )
nodes/fragment/43/position = Vector2( 3020, 220 )
nodes/fragment/44/node = SubResource( 60 )
nodes/fragment/44/position = Vector2( 3180, 160 )
nodes/fragment/45/node = SubResource( 61 )
nodes/fragment/45/position = Vector2( 3360, 80 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 2, 0, 6, 0, 6, 0, 3, 0, 3, 0, 8, 1, 8, 0, 4, 0, 6, 0, 9, 0, 9, 0, 10, 0, 10, 0, 8, 0, 5, 0, 11, 0, 5, 0, 12, 0, 11, 0, 14, 0, 14, 0, 15, 0, 15, 0, 16, 0, 16, 0, 13, 0, 12, 0, 13, 1, 2, 0, 17, 0, 17, 0, 18, 0, 6, 0, 19, 0, 20, 0, 21, 0, 22, 0, 20, 0, 19, 0, 22, 1, 21, 0, 24, 0, 18, 0, 25, 2, 13, 0, 25, 0, 24, 0, 26, 0, 21, 0, 27, 0, 26, 0, 29, 0, 29, 0, 28, 0, 21, 0, 30, 0, 30, 1, 31, 2, 30, 0, 31, 1, 25, 0, 31, 0, 21, 0, 33, 0, 32, 0, 34, 0, 33, 0, 34, 1, 6, 0, 35, 0, 28, 0, 25, 1, 27, 0, 28, 1, 5, 0, 36, 0, 31, 0, 37, 0, 18, 0, 38, 1, 36, 0, 38, 0, 38, 0, 39, 0, 39, 0, 37, 2, 35, 0, 40, 0, 40, 0, 37, 1, 42, 1, 43, 0, 43, 0, 44, 0, 41, 0, 42, 0, 34, 0, 45, 0, 44, 0, 45, 1, 45, 0, 0, 1, 37, 0, 0, 0, 10, 0, 22, 0 )

[sub_resource type="ShaderMaterial" id=94]
shader = SubResource( 93 )

[sub_resource type="Animation" id=95]
resource_name = "New Anim"
length = 4.0
tracks/0/type = "value"
tracks/0/path = NodePath("lake:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}

[node name="Spatial" type="Spatial"]
script = ExtResource( 1 )

[node name="lake" type="MeshInstance" parent="."]
extra_cull_margin = 1.11
mesh = SubResource( 1 )
material/0 = SubResource( 94 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.662359, 0.34208, -0.66653, 0, 0.889672, 0.456601, 0.749187, 0.302434, -0.589282, -1.67321, 1.44304, -1.57483 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
"anims/New Anim" = SubResource( 95 )

[node name="Label" type="Label" parent="."]
visible = false
margin_right = 40.0
margin_bottom = 14.0
text = "Still, it can be optimized by reducing the subdivision to 32x32 as recommended, or 16x16 at very minimum result.
For ambient occlusion you can use vertex-based gradient instead "
__meta__ = {
"_edit_use_anchors_": false
}
